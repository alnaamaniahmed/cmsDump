@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
	Layout = "master.cshtml";

	var productTitle = Model.Value<string>("productTitle") ?? Model.Name;
	var price = Model.Value<decimal>("price");
	var category = Model.Value<string>("category");
	var brand = Model.Value<string>("brand");
	var rating = Model.Value<decimal>("rating");
	var region = Model.Value<string>("region");
	var description = Model.Value<string>("description");

	var iconClass = category?.ToLower() switch
	{
		"electronics" => "fas fa-laptop",
		"clothing" => "fas fa-tshirt",
		"books" => "fas fa-book",
		"home" => "fas fa-home",
		"sports" => "fas fa-futbol",
		_ => "fas fa-box"
	};

	var gradientBg = category?.ToLower() switch
	{
		"electronics" => "background: radial-gradient(circle at 30% 40%, rgba(120, 119, 198, 0.8) 0%, rgba(255, 119, 198, 0.6) 50%, transparent 100%);",
		"clothing" => "background: radial-gradient(circle at 70% 30%, rgba(255, 119, 198, 0.8) 0%, rgba(120, 200, 255, 0.6) 50%, transparent 100%);",
		"books" => "background: radial-gradient(circle at 50% 60%, rgba(120, 200, 255, 0.8) 0%, rgba(120, 255, 200, 0.6) 50%, transparent 100%);",
		"home" => "background: radial-gradient(circle at 20% 80%, rgba(120, 255, 200, 0.8) 0%, rgba(255, 200, 120, 0.6) 50%, transparent 100%);",
		"sports" => "background: radial-gradient(circle at 80% 20%, rgba(255, 200, 120, 0.8) 0%, rgba(255, 119, 198, 0.6) 50%, transparent 100%);",
		_ => "background: radial-gradient(circle at 50% 50%, rgba(120, 119, 198, 0.8) 0%, rgba(255, 119, 198, 0.6) 50%, transparent 100%);"
	};
}

<!-- Breadcrumb -->
<section class="py-3" style="background: var(--bg-darker);">
	<div class="container">
		<nav aria-label="breadcrumb">
			<ol class="breadcrumb mb-0">
				<li class="breadcrumb-item"><a href="/" style="color: var(--text-gray);">Home</a></li>
				<li class="breadcrumb-item"><a href="/products" style="color: var(--text-gray);">Products</a></li>
				<li class="breadcrumb-item"><a href="/products?category=@category" style="color: var(--text-gray);">@category</a></li>
				<li class="breadcrumb-item active" style="color: var(--text-white);">@productTitle</li>
			</ol>
		</nav>
	</div>
</section>

<!-- Product Detail -->
<section class="py-5" style="background: #f8fafc;">
	<div class="container">
		<div class="row">
			<div class="col-lg-6 mb-4">
				<!-- Product Image -->
				<div class="card" style="background: white; border: 1px solid #e5e7eb; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
					<div class="card-body text-center p-5">
						<div class="product-image-large d-flex align-items-center justify-content-center position-relative"
							style="@gradientBg background-color: #f3f4f6; height: 400px; border-radius: 12px;">
							<i class="@iconClass" style="font-size: 8rem; color: white; opacity: 0.9; z-index: 2;"></i>
							<div class="position-absolute w-100 h-100" style="background: rgba(0,0,0,0.1); opacity: 0.3; z-index: 1; border-radius: 12px;"></div>
						</div>
					</div>
				</div>
			</div>

			<div class="col-lg-6">
				<!-- Product Info -->
				<div class="product-info">
					<div class="mb-3">
						<span class="badge" style="background: var(--primary-button); color: white;">@category</span>
						<span class="badge ms-2" style="background: #6b7280; color: white;">@region</span>
					</div>

					<h1 class="fw-bold mb-3" style="color: #1f2937;">@productTitle</h1>

					<div class="mb-3">
						<span style="color: #6b7280;">Brand: </span>
						<span class="fw-semibold" style="color: #1f2937;">@brand</span>
					</div>

					<!-- Rating -->
					<div class="mb-4">
						<div class="d-flex align-items-center">
							<div class="rating me-3">
								@for (int i = 1; i <= 5; i++)
								{
									if (i <= rating)
									{
										<i class="fas fa-star" style="color: #ffc107;"></i>
									}
									else
									{
										<i class="far fa-star" style="color: #ffc107;"></i>
									}
								}
							</div>
							<span class="fw-semibold" style="color: #1f2937;">@rating.ToString("F1")</span>
							<span class="ms-2" style="color: #6b7280;">(Based on customer reviews)</span>
						</div>
					</div>

					<!-- Price -->
					<div class="mb-4">
						<div class="price-section">
							<span class="price display-5 fw-bold" style="color: var(--primary-button);">$@price.ToString("F2")</span>
							<small class="d-block" style="color: #6b7280;">Price includes tax</small>
						</div>
					</div>

					<!-- Description -->
					@if (!string.IsNullOrEmpty(description))
					{
						<div class="mb-4">
							<h5 style="color: #1f2937;">Description</h5>
							<div style="color: #6b7280;">
								@Html.Raw(description)
							</div>
						</div>
					}

					<!-- Action Buttons -->
					<div class="d-flex gap-3 mb-4">
						<button class="btn btn-primary btn-lg flex-grow-1" onclick="addToCartFromProduct()">
							<i class="fas fa-shopping-cart me-2"></i>Add to Cart
						</button>
						<button class="btn btn-lg" style="border: 2px solid #374151; color: #374151; background: transparent; border-radius: 30px; padding: 1rem 2rem; font-size: 1rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; transition: all 0.3s ease;" onmouseover="this.style.background='#374151'; this.style.color='white';" onmouseout="this.style.background='transparent'; this.style.color='#374151';">
							<i class="fas fa-heart"></i>
						</button>
						<button class="btn btn-lg" style="border: 2px solid #374151; color: #374151; background: transparent; border-radius: 30px; padding: 1rem 2rem; font-size: 1rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; transition: all 0.3s ease;" onmouseover="this.style.background='#374151'; this.style.color='white';" onmouseout="this.style.background='transparent'; this.style.color='#374151';">
							<i class="fas fa-share"></i>
						</button>
					</div>

					<!-- Product Features -->
					<div class="product-features">
						<div class="row">
							<div class="col-6 mb-3">
								<div class="feature-item">
									<i class="fas fa-truck me-2" style="color: var(--primary-button);"></i>
									<span style="color: #1f2937;">Free Shipping</span>
								</div>
							</div>
							<div class="col-6 mb-3">
								<div class="feature-item">
									<i class="fas fa-undo me-2" style="color: var(--primary-button);"></i>
									<span style="color: #1f2937;">30-Day Returns</span>
								</div>
							</div>
							<div class="col-6 mb-3">
								<div class="feature-item">
									<i class="fas fa-shield-alt me-2" style="color: var(--primary-button);"></i>
									<span style="color: #1f2937;">2-Year Warranty</span>
								</div>
							</div>
							<div class="col-6 mb-3">
								<div class="feature-item">
									<i class="fas fa-headset me-2" style="color: var(--primary-button);"></i>
									<span style="color: #1f2937;">24/7 Support</span>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<!-- Related Products -->
<section class="py-5" style="background: var(--bg-darker);">
	<div class="container">
		<h3 class="fw-bold mb-4" style="color: var(--text-white);">Related Products</h3>

		@{
			var relatedProducts = Umbraco.ContentAtRoot()
			.SelectMany(x => x.DescendantsOrSelf("product"))
			.Where(x => x.IsVisible() && x.Id != Model.Id && x.Value<string>("category") == category)
			.Take(4)
			.ToList();
		}

		@if (relatedProducts.Any())
		{
			<div class="row">
				@foreach (var relatedProduct in relatedProducts)
				{
					var relatedTitle = relatedProduct.Value<string>("productTitle") ?? relatedProduct.Name;
					var relatedPrice = relatedProduct.Value<decimal>("price");
					var relatedBrand = relatedProduct.Value<string>("brand");
					var relatedRating = relatedProduct.Value<decimal>("rating");

					<div class="col-lg-3 col-md-6 mb-4">
						<div class="card product-card">
							<div class="product-image card-img-top d-flex align-items-center justify-content-center position-relative"
								style="height: 200px; @gradientBg background-color: var(--bg-darker);">
								<i class="@iconClass" style="font-size: 3rem; color: white; opacity: 0.9; z-index: 2;"></i>
								<div class="position-absolute w-100 h-100" style="background: var(--bg-darker); opacity: 0.3; z-index: 1;"></div>
							</div>
							<div class="card-body">
								<h6 class="card-title" style="color: var(--text-white);">@relatedTitle</h6>
								<p class="small" style="color: var(--text-gray);">@relatedBrand</p>
								<div class="d-flex justify-content-between align-items-center">
									<span class="price fw-bold" style="color: var(--primary-button);">$@relatedPrice.ToString("F2")</span>
									<div class="rating">
										@for (int i = 1; i <= 5; i++)
										{
											if (i <= relatedRating)
											{
												<i class="fas fa-star small" style="color: #ffc107;"></i>
											}
											else
											{
												<i class="far fa-star small" style="color: #ffc107;"></i>
											}
										}
									</div>
								</div>
								<a href="@relatedProduct.Url()" class="btn btn-outline-light w-100 mt-3">View Details</a>
							</div>
						</div>
					</div>
				}
			</div>
		}
		else
		{
			<p style="color: var(--text-gray);">No related products found.</p>
		}
	</div>
</section>

<script>
	function addToCartFromProduct() {
		// Get data from page elements instead of server-side variables
		const title = document.querySelector('h1').textContent.trim();
		const priceText = document.querySelector('.price').textContent.replace('$', '');
		const price = parseFloat(priceText);
		
		const productData = {
			id: '@Model.Id',
			title: title,
			price: price,
			category: '@category',
			url: '@Model.Url()'
		};

		addToCart(productData);
	}
</script>