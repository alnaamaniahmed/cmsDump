@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
    Layout = "master.cshtml";
}
@{
    // Get query parameters
    string category = Context.Request.Query["category"].ToString();
    string brand = Context.Request.Query["brand"].ToString();
    string minPrice = Context.Request.Query["minPrice"].ToString();
    string maxPrice = Context.Request.Query["maxPrice"].ToString();
    string sortBy = Context.Request.Query["sortBy"].ToString();
    string region = Context.Request.Query["region"].ToString();
    int currentPage = int.TryParse(Context.Request.Query["page"], out var p) ? p : 1;
    int pageSize = 5;
    
    // Get all products - FIXED VERSION
    var allProducts = Umbraco.ContentAtRoot()
        .SelectMany(x => x.DescendantsOrSelf())
        .Where(x => x.IsVisible() && x.ContentType.Alias == "product")
        .ToList();

    // Apply filters
    var filteredProducts = allProducts.AsEnumerable();

    // Category filter
    if (!string.IsNullOrEmpty(category))
    {
        filteredProducts = filteredProducts.Where(p => p.Value<string>("category")?.Equals(category, StringComparison.OrdinalIgnoreCase) == true);
    }

    // Brand filter
    if (!string.IsNullOrEmpty(brand))
    {
        filteredProducts = filteredProducts.Where(p => p.Value<string>("brand")?.Equals(brand, StringComparison.OrdinalIgnoreCase) == true);
    }

    // Price filter
    if (!string.IsNullOrEmpty(minPrice) && decimal.TryParse(minPrice, out var minPriceValue))
    {
        filteredProducts = filteredProducts.Where(p => p.Value<decimal>("price") >= minPriceValue);
    }
    if (!string.IsNullOrEmpty(maxPrice) && decimal.TryParse(maxPrice, out var maxPriceValue))
    {
        filteredProducts = filteredProducts.Where(p => p.Value<decimal>("price") <= maxPriceValue);
    }

    // Region filter 
    if (!string.IsNullOrEmpty(region))
    {
        filteredProducts = filteredProducts.Where(p => p.Value<string>("region")?.Equals(region, StringComparison.OrdinalIgnoreCase) == true);
    }

    // Sorting
    switch (sortBy?.ToLower())
    {
        case "price_low":
            filteredProducts = filteredProducts.OrderBy(p => p.Value<decimal>("price"));
            break;
        case "price_high":
            filteredProducts = filteredProducts.OrderByDescending(p => p.Value<decimal>("price"));
            break;
        case "popularity":
            filteredProducts = filteredProducts.OrderByDescending(p => p.Value<int>("popularity"));
            break;
        case "newest":
            filteredProducts = filteredProducts.OrderByDescending(p => p.CreateDate);
            break;
        case "oldest":
            filteredProducts = filteredProducts.OrderBy(p => p.CreateDate);
            break;
        default:
            filteredProducts = filteredProducts.OrderByDescending(p => p.Value<decimal>("rating"));
            break;
    }

    // Pagination
    int totalProducts = filteredProducts.Count();
    int totalPages = (int)Math.Ceiling((double)totalProducts / pageSize);
    var pagedProducts = filteredProducts
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();

    // Get filter options for dropdowns
    var categories = allProducts.Select(p => p.Value<string>("category")).Where(c => !string.IsNullOrEmpty(c)).Distinct().OrderBy(c => c).ToList();
    var brands = allProducts.Select(p => p.Value<string>("brand")).Where(b => !string.IsNullOrEmpty(b)).Distinct().OrderBy(b => b).ToList();
    var regions = allProducts.Select(p => p.Value<string>("region")).Where(r => !string.IsNullOrEmpty(r)).Distinct().OrderBy(r => r).ToList();
}

<!-- Page Header -->
<section class="py-5" style="background: var(--bg-darker);">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h1 class="fw-bold mb-3" style="color: var(--text-white);">@(Model.Value("pageTitle") ?? "Our Products")</h1>
                <p class="lead" style="color: var(--text-gray);">@(Model.Value("pageDescription") ?? "Discover our amazing collection of products across different categories")</p>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/" style="color: var(--text-gray);">Home</a></li>
                        <li class="breadcrumb-item active" style="color: var(--text-white);">Products</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
</section>

<!-- Products Section -->
<section class="py-5" style="background: #f8fafc;">
    <div class="container">
        <div class="row">
            <!-- Filters Sidebar -->
            <div class="col-lg-3 col-md-4 mb-4">
                <div class="filter-section" style="background: white; border: 1px solid #e5e7eb; box-shadow: 0 1px 3px rgba(0,0,0,0.1); border-radius: 16px; padding: 2rem;">
                    <h5 class="fw-bold mb-3" style="color: #1f2937;">
                        <i class="fas fa-filter me-2" style="color: var(--primary-button);"></i>Filters
                    </h5>
                    
                    <form method="get" id="filterForm">
                        <!-- Category Filter -->
                        <div class="mb-4">
                            <label class="form-label fw-semibold" style="color: #1f2937;">Category</label>
                            <select name="category" class="form-select filter-control" style="background: white; border: 1px solid #d1d5db; color: #1f2937;">
                                <option value="">All Categories</option>
                                @foreach (var cat in categories)
                                {
                                    @if (category == cat)
                                    {
                                        <option value="@cat" selected>@cat</option>
                                    }
                                    else
                                    {
                                        <option value="@cat">@cat</option>
                                    }
                                }
                            </select>
                        </div>

                        <!-- Brand Filter -->
                        <div class="mb-4">
                            <label class="form-label fw-semibold" style="color: #1f2937;">Brand</label>
                            <select name="brand" class="form-select filter-control" style="background: white; border: 1px solid #d1d5db; color: #1f2937;">
                                <option value="">All Brands</option>
                                @foreach (var brandOption in brands)
                                {
                                    @if (brand == brandOption)
                                    {
                                        <option value="@brandOption" selected>@brandOption</option>
                                    }
                                    else
                                    {
                                        <option value="@brandOption">@brandOption</option>
                                    }
                                }
                            </select>
                        </div>

                        <!-- Price Filter -->
                        <div class="mb-4">
                            <label class="form-label fw-semibold" style="color: #1f2937;">Price Range</label>
                            <div class="row">
                                <div class="col-6">
                                    <input type="number" name="minPrice" class="form-control filter-control" placeholder="Min" value="@minPrice" min="0" step="0.01" style="background: white; border: 1px solid #d1d5db; color: #1f2937;">
                                </div>
                                <div class="col-6">
                                    <input type="number" name="maxPrice" class="form-control filter-control" placeholder="Max" value="@maxPrice" min="0" step="0.01" style="background: white; border: 1px solid #d1d5db; color: #1f2937;">
                                </div>
                            </div>
                        </div>

                        <!-- Region Filter -->
                        <div class="mb-4">
                            <label class="form-label fw-semibold" style="color: #1f2937;">Region</label>
                            <select name="region" class="form-select filter-control" style="background: white; border: 1px solid #d1d5db; color: #1f2937;">
                                <option value="">All Regions</option>
                                @foreach (var regionOption in regions)
                                {
                                    @if (region == regionOption)
                                    {
                                        <option value="@regionOption" selected>@regionOption</option>
                                    }
                                    else
                                    {
                                        <option value="@regionOption">@regionOption</option>
                                    }
                                }
                            </select>
                        </div>

                        <!-- Hidden fields to preserve other parameters -->
                        <input type="hidden" name="sortBy" value="@sortBy">
                        <input type="hidden" name="page" value="1">

                        <button type="submit" class="btn btn-primary w-100 mb-2">Apply Filters</button>
                        <a href="/products" class="btn w-100" style="border: 2px solid #374151; color: #374151; background: transparent; border-radius: 30px; padding: 0.75rem 2rem; font-size: 0.95rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; text-decoration: none; transition: all 0.3s ease;" onmouseover="this.style.background='#374151'; this.style.color='white';" onmouseout="this.style.background='transparent'; this.style.color='#374151';">Clear All</a>
                    </form>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="col-lg-9 col-md-8">
                <!-- Results Header -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h6 class="mb-0" style="color: #1f2937;">Showing @pagedProducts.Count() of @totalProducts products</h6>
                        @if (!string.IsNullOrEmpty(category) || !string.IsNullOrEmpty(brand) || !string.IsNullOrEmpty(minPrice) || !string.IsNullOrEmpty(maxPrice))
                        {
                            <small style="color: #6b7280;">Filters applied</small>
                        }
                    </div>
                    
                    <!-- Sort Dropdown -->
                    <div>
                        <select name="sortBy" class="form-select" style="width: auto; background: white; border: 1px solid #d1d5db; color: #1f2937;" onchange="updateSort(this.value)">
                            @if (string.IsNullOrEmpty(sortBy))
                            {
                                <option value="" selected>Sort by Rating</option>
                            }
                            else
                            {
                                <option value="">Sort by Rating</option>
                            }
                            
                            @if (sortBy == "price_low")
                            {
                                <option value="price_low" selected>Price: Low to High</option>
                            }
                            else
                            {
                                <option value="price_low">Price: Low to High</option>
                            }
                            
                            @if (sortBy == "price_high")
                            {
                                <option value="price_high" selected>Price: High to Low</option>
                            }
                            else
                            {
                                <option value="price_high">Price: High to Low</option>
                            }
                            
                            @if (sortBy == "popularity")
                            {
                                <option value="popularity" selected>Most Popular</option>
                            }
                            else
                            {
                                <option value="popularity">Most Popular</option>
                            }
                            
                            @if (sortBy == "newest")
                            {
                                <option value="newest" selected>Newest First</option>
                            }
                            else
                            {
                                <option value="newest">Newest First</option>
                            }
                            
                            @if (sortBy == "oldest")
                            {
                                <option value="oldest" selected>Oldest First</option>
                            }
                            else
                            {
                                <option value="oldest">Oldest First</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Products Grid -->
                @if (pagedProducts.Any())
                {
                    <div class="row">
                        @foreach (var product in pagedProducts)
                        {
                            var productTitle = product.Value<string>("productTitle") ?? product.Name;
                            var price = product.Value<decimal>("price");
                            var productCategory = product.Value<string>("category");
                            var productBrand = product.Value<string>("brand");
                            var rating = product.Value<decimal>("rating");
                            var productRegion = product.Value<string>("region");
                            
                            var iconClass = productCategory?.ToLower() switch
                            {
                                "electronics" => "fas fa-laptop",
                                "clothing" => "fas fa-tshirt",
                                "books" => "fas fa-book",
                                "home" => "fas fa-home",
                                "toys" => "fas fa-gamepad",
                                _ => "fas fa-box"
                            };

                            var gradientBg = productCategory?.ToLower() switch
                            {
                                "electronics" => "background: radial-gradient(circle at 30% 40%, rgba(120, 119, 198, 0.8) 0%, rgba(255, 119, 198, 0.6) 50%, transparent 100%);",
                                "clothing" => "background: radial-gradient(circle at 70% 30%, rgba(255, 119, 198, 0.8) 0%, rgba(120, 200, 255, 0.6) 50%, transparent 100%);",
                                "books" => "background: radial-gradient(circle at 50% 60%, rgba(120, 200, 255, 0.8) 0%, rgba(120, 255, 200, 0.6) 50%, transparent 100%);",
                                "home" => "background: radial-gradient(circle at 20% 80%, rgba(120, 255, 200, 0.8) 0%, rgba(255, 200, 120, 0.6) 50%, transparent 100%);",
                                "toys" => "background: radial-gradient(circle at 80% 20%, rgba(255, 200, 120, 0.8) 0%, rgba(255, 119, 198, 0.6) 50%, transparent 100%);",
                                _ => "background: radial-gradient(circle at 50% 50%, rgba(120, 119, 198, 0.8) 0%, rgba(255, 119, 198, 0.6) 50%, transparent 100%);"
                            };
                            
                            <div class="col-lg-6 col-md-12 mb-4">
                                <div class="card product-card h-100" style="background: white; border: 1px solid #e5e7eb; box-shadow: 0 1px 3px rgba(0,0,0,0.1); transition: all 0.3s ease; border-radius: 16px;">
                                    <div class="row g-0">
                                        <div class="col-4">
                                            <div class="product-image d-flex align-items-center justify-content-center h-100 position-relative" style="@gradientBg background-color: #f3f4f6; min-height: 200px; border-radius: 16px 0 0 16px;">
                                                <i class="@iconClass" style="font-size: 2.5rem; color: white; opacity: 0.9; z-index: 2;"></i>
                                                <div class="position-absolute w-100 h-100" style="background: rgba(0,0,0,0.1); opacity: 0.3; z-index: 1; border-radius: 16px 0 0 16px;"></div>
                                            </div>
                                        </div>
                                        <div class="col-8">
                                            <div class="card-body">
                                                <h6 class="card-title mb-2">
                                                    <a href="@product.Url()" class="text-decoration-none" style="color: #1f2937;">@productTitle</a>
                                                </h6>
                                                <p class="small mb-2" style="color: #6b7280;">@productCategory • @productBrand</p>
                                                
                                                <!-- Rating -->
                                                <div class="mb-2">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        if (i <= rating)
                                                        {
                                                            <i class="fas fa-star" style="color: #ffc107;"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="far fa-star" style="color: #ffc107;"></i>
                                                        }
                                                    }
                                                    <span class="ms-1 small" style="color: #1f2937;">@rating.ToString("F1")</span>
                                                </div>

                                                <!-- Price and Region -->
                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <span class="price fs-5 fw-bold" style="color: var(--primary-button);">$@price.ToString("F2")</span>
                                                    <small style="color: #6b7280;">@productRegion</small>
                                                </div>
                                                <!-- Action buttons -->
                                                <div class="d-flex gap-2">
                                                    <a href="@product.Url()" class="btn btn-sm flex-grow-1" style="border: 2px solid #374151; color: #374151; background: transparent; border-radius: 30px; padding: 0.5rem 1rem; font-size: 0.875rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; text-decoration: none; transition: all 0.3s ease;" onmouseover="this.style.background='#374151'; this.style.color='white';" onmouseout="this.style.background='transparent'; this.style.color='#374151';">View Details</a>
                                                    <button class="btn btn-primary btn-sm" 
                                                        data-product-id="@product.Id" 
                                                        data-product-title="@productTitle" 
                                                        data-product-price="@price" 
                                                        data-product-category="@productCategory" 
                                                        data-product-url="@product.Url()" 
                                                        onclick="addToCartFromListing(this)">
                                                        <i class="fas fa-cart-plus"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    @if (totalPages > 1)
                    {
                        <nav aria-label="Products pagination" class="mt-4">
                            <ul class="pagination justify-content-center">
                                @if (currentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@GetPageUrl(currentPage - 1)" style="color: #1f2937; border: 1px solid #d1d5db; background: white; margin: 0 2px; border-radius: 8px; padding: 0.5rem 0.75rem; transition: all 0.2s ease;">
                                            <i class="fas fa-chevron-left"></i>
                                        </a>
                                    </li>
                                }

                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <a class="page-link" href="@GetPageUrl(i)" style="@(i == currentPage ? "background: var(--primary-button); border-color: var(--primary-button); color: white !important;" : "color: #1f2937; border: 1px solid #d1d5db; background: white;") margin: 0 2px; border-radius: 8px; padding: 0.5rem 0.75rem; transition: all 0.2s ease;">@i</a>
                                    </li>
                                }

                                @if (currentPage < totalPages)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@GetPageUrl(currentPage + 1)" style="color: #1f2937; border: 1px solid #d1d5db; background: white; margin: 0 2px; border-radius: 8px; padding: 0.5rem 0.75rem; transition: all 0.2s ease;">
                                            <i class="fas fa-chevron-right"></i>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <!-- No Products Found -->
                    <div class="text-center py-5">
                        <i class="fas fa-search" style="font-size: 4rem; color: #6b7280;"></i>
                        <h4 class="mt-3" style="color: #1f2937;">No Products Found</h4>
                        <p style="color: #6b7280;">Try adjusting your filters or search criteria</p>
                        <a href="/products" class="btn btn-primary">Clear Filters</a>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@{
    string GetPageUrl(int page)
    {
        var queryParams = new List<string>();
        
        if (!string.IsNullOrEmpty(category))
            queryParams.Add($"category={Uri.EscapeDataString(category)}");
        
        if (!string.IsNullOrEmpty(brand))
            queryParams.Add($"brand={Uri.EscapeDataString(brand)}");
        
        if (!string.IsNullOrEmpty(minPrice))
            queryParams.Add($"minPrice={Uri.EscapeDataString(minPrice)}");
        
        if (!string.IsNullOrEmpty(maxPrice))
            queryParams.Add($"maxPrice={Uri.EscapeDataString(maxPrice)}");
        
        if (!string.IsNullOrEmpty(sortBy))
            queryParams.Add($"sortBy={Uri.EscapeDataString(sortBy)}");
        
        if (!string.IsNullOrEmpty(region))
            queryParams.Add($"region={Uri.EscapeDataString(region)}");
        
        queryParams.Add($"page={page}");
        
        return $"/products?{string.Join("&", queryParams)}";
    }
}

<script>
function updateSort(sortValue) {
    const url = new URL(window.location);
    if (sortValue) {
        url.searchParams.set('sortBy', sortValue);
    } else {
        url.searchParams.delete('sortBy');
    }
    url.searchParams.set('page', '1'); // Reset to first page
    window.location.href = url.toString();
}

// Auto-submit form when filter controls change
document.addEventListener('DOMContentLoaded', function() {
    const filterControls = document.querySelectorAll('.filter-control');
    filterControls.forEach(control => {
        control.addEventListener('change', function() {
            // Add a small delay to allow for multiple quick changes
            setTimeout(() => {
                document.getElementById('filterForm').submit();
            }, 300);
        });
    });
});
</script>
<script>
    function addToCartFromListing(button) {
        const productData = {
            id: button.getAttribute('data-product-id'),
            title: button.getAttribute('data-product-title'),
            price: parseFloat(button.getAttribute('data-product-price')),
            category: button.getAttribute('data-product-category'),
            url: button.getAttribute('data-product-url')
        };
        
        addToCart(productData);
    }
</script>